AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Stack to create a Simple Queue Service (SQS) Queue with DLQ Processing

Parameters:
  Version:
    Type: String
    Default: "latest"

Resources:
  # DLQ Processor Lambda Function
  DLQProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DLQProcessorFunction
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !ImportValue LambdaExecutionRoleArn  # Import existing execution role
      Code:
        S3Bucket: !ImportValue ArtifactBucketName
        S3Key: !Sub lambda/dlqProcessor-${Version}.zip
      Timeout: 10

  # Main Queue (with RedrivePolicy to send failed messages to DLQ)
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: devops-sqs-queue
      VisibilityTimeout: 30
      MessageRetentionPeriod: 86400  # 1 day in seconds
      DelaySeconds: 0
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
        maxReceiveCount: 5

  # Dead-Letter Queue
  MyDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: devops-sqs-dlq
      VisibilityTimeout: 30
      MessageRetentionPeriod: 1209600  # 14 days

  # Event Source Mapping: DLQ triggers DLQProcessorFunction
  DLQEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - DLQProcessorFunction
      - MyDeadLetterQueue
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyDeadLetterQueue.Arn  # Use DLQ ARN
      FunctionName: !Ref DLQProcessorFunction       # Use Lambda ARN

Outputs:
  MyQueueUrl:
    Description: The URL of the main SQS queue
    Value: !Ref MyQueue
    Export:
      Name: MyQueueUrl

  MyDeadLetterQueueUrl:
    Description: The URL of the Dead Letter Queue (DLQ)
    Value: !Ref MyDeadLetterQueue
    Export:
      Name: MyDeadLetterQueueUrl

  MyDeadLetterQueueArn:
    Description: The ARN of the Dead Letter Queue (DLQ)
    Value: !GetAtt MyDeadLetterQueue.Arn
    Export:
      Name: MyDeadLetterQueueArn