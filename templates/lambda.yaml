AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway, Lambda Functions, and IAM roles for file upload

Parameters:
  Version:
    Type: String
    Default: "latest"

Resources:
  # Create API Gateway
  APIGatewayRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyAPIGateway
      Description: API Gateway for file uploads
      FailOnWarnings: true

  # Create Resource (/upload)
  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: upload

  # Create Method for POST on /upload (integrated with Lambda)
  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref UploadResource
      RestApiId: !Ref APIGatewayRestAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitDataFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # Create Method for OPTIONS on /upload (CORS preflight request)
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref UploadResource
      RestApiId: !Ref APIGatewayRestAPI
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # Deploy the API Gateway
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: UploadMethod
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName: prod
      StageDescription:
        MethodSettings:
          - DataTraceEnabled: true
            LoggingLevel: INFO
            HttpMethod: "*"
            ResourcePath: "/*"

  # Submit Data Lambda Function
  SubmitDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SubmitDataFunction
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !ImportValue LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue ArtifactBucketName
        S3Key: lambda/submitData-${Version}.zip
      Timeout: 10
      Environment:
        Variables:
          QUEUE_URL: !ImportValue MyQueueUrl
          BUCKET_NAME: !ImportValue StaticSiteBucketName
          API_ENDPOINT: !Ref APIGatewayRestAPI

  SubmitDataFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: SubmitDataFunction
    Properties:
      FunctionName: !GetAtt SubmitDataFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/POST/upload

  # Cleanup Lambda Function
  CleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CleanupFunction
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !ImportValue LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue ArtifactBucketName
        S3Key: lambda/cleanup-${Version}.zip
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !ImportValue StaticSiteBucketName

  # Attach CloudWatch Logging Role to API Gateway
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !ImportValue ApiGatewayLoggingRoleArn

Outputs:
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"
    Export:
      Name: "APIEndpoint"

  SubmitDataFunctionArn:
    Value: !GetAtt SubmitDataFunction.Arn
    Export:
      Name: SubmitDataFunctionArn

  CleanupFunctionArn:
    Value: !GetAtt CleanupFunction.Arn
    Export:
      Name: CleanupFunctionArn
